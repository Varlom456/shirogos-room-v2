generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donate {
  id       Int     @id @default(autoincrement())
  username String
  amount   Float?  @default(0)
  gifts    String? @default("")

  @@map("donates")
}

model UniqueRole {
  id    Int            @id @default(autoincrement())
  title String         @unique
  type  UniqueRoleType

  @@map("unique_roles")
}

enum UniqueRoleType {
  ADJECTIVES
  NOUNS
}

model Panopticon {
  id   Int    @id @default(autoincrement())
  cost Int    @default(0)
  img  String

  @@map("panopticons")
}

model RoomBackground {
  id   Int    @id @default(autoincrement())
  cost Int    @default(0)
  img  String

  @@map("room_backgrounds")
}

model User {
  id            Int              @id @default(autoincrement())
  username      String
  email         String
  dangos        Int              @default(0)
  profile_img   String?
  role          String           @default("user")
  room          Room?            @relation(fields: [roomId], references: [id])
  roomId        Int?             @unique
  twitch        TwitchProfile    @relation(fields: [twitchId], references: [id])
  twitchId      Int              @unique
  discord       DiscordProfile?  @relation(fields: [discordId], references: [id])
  discordId     Int?             @unique
  vk            VkProfile?       @relation(fields: [vkId], references: [id])
  vkId          Int?             @unique
  telegram      TelegramProfile? @relation(fields: [telegramId], references: [id])
  telegramId    Int?             @unique
  Token         Token?
  Order         Order[]

  @@map("users")
}

model Token {
  id           Int    @id @default(autoincrement())
  accessToken  String @unique
  refreshToken String @unique
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique

  @@map("tokens")
}

model Room {
  id   Int    @id @default(autoincrement())
  name String
  User User?

  @@map("rooms")
}

model TwitchProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("twitch_profiles")
}

model DiscordProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("discord_profiles")
}

model VkProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("vk_profiles")
}

model TelegramProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("telegram_profiles")
}

enum OrderStatus {
  PENDING
  COMPLETED
  REJECTED
}

model Order {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  orderType    OrderType   @relation(fields: [orderTypeId], references: [id])
  orderPrice   OrderPrice  @relation(fields: [orderPriceId], references: [id])
  userId       Int
  orderTypeId  Int
  orderText    String
  status       OrderStatus @default(value: PENDING)
  orderPriceId Int

  @@map("orders")
}

model OrderType {
  id          Int          @id @default(autoincrement())
  type        String       @unique
  orderRules  String?
  orderPrices OrderPrice[]
  Order       Order[]

  @@map("order_types")
}

model OrderPrice {
  id          Int       @id @default(autoincrement())
  order       OrderType @relation(fields: [orderTypeId], references: [id])
  orderTypeId Int
  cost        Int
  text        String
  Order       Order[]

  @@map("order_prices")
}

model OnlineOption {
  id    Int    @id @default(autoincrement())
  title String

  @@map("online_options")
}

model BirthdayAward {
  id    Int @id @default(autoincrement())
  award Int

  @@map("birthday_awards")
}

model News {
  id         Int      @id @default(autoincrement())
  text       String
  news_img   String
  created_at DateTime @default(now())

  @@map("news")
}

model Chronicle {
  id     Int              @id @default(autoincrement())
  year   Int
  month  Int
  events ChronicleEvent[]

  @@map("chronicles")
}

model ChronicleEvent {
  id          Int        @id @default(autoincrement())
  day         Int
  prefix      String?
  text        String?
  img         String?
  Chronicle   Chronicle? @relation(fields: [chronicleId], references: [id])
  chronicleId Int?

  @@map("chronicle_events")
}
